name: Hyperion PR Build
on:
  pull_request:
    branches:
      - master

jobs:

######################
###### Linux #########
######################

  Linux:
    name: ${{ matrix.dockerName }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerTag: [ amd64, i386, armv6hf, armv7hf, aarch64 ]
        include:
          - dockerTag: amd64
            dockerName: Debian Stretch (AMD64)
            platform: x11
          - dockerTag: i386
            dockerName: Debian Stretch (i386)
            platform: x11
          - dockerTag: armv6hf
            dockerName: Debian Stretch (Raspberry Pi v1 & ZERO)
            platform: rpi
          - dockerTag: armv7hf
            dockerName: Debian Stretch (Raspberry Pi 2 & 3)
            platform: rpi
          - dockerTag: aarch64
            dockerName: Debian Stretch (Generic AARCH64)
            platform: amlogic

    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: true

      # Append PR number to version
      - name: Append PR number to version
        shell: bash
        run: |
          tr -d '\n' < version > temp && mv temp version
          echo -n -PR#${{ github.event.pull_request.number }} >> version

      # Build packages
      - name: Build packages
        env:
          DOCKER_TAG: ${{ matrix.dockerTag }}
          DOCKER_NAME: ${{ matrix.dockerName }}
          PLATFORM: ${{ matrix.platform }}
        shell: bash
        run: ./.ci/ci_build.sh

      # Collecting deployable artifacts
      - name: Collecting deployable artifacts
        shell: bash
        run: |
          mkdir -p ${{ matrix.dockerTag }}
          mv deploy/*.tar.gz ${{ matrix.dockerTag }}

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.dockerTag }}.zip
          path: ${{ matrix.dockerTag }}

######################
###### macOS #########
######################

  macOS:
    name: macOS
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: true

      # Append PR number to version
      - name: Append PR number to version
        shell: bash
        run: |
          tr -d '\n' < version > temp && mv temp version
          echo -n "-PR#${{ github.event.pull_request.number }}" >> version

      # Install dependencies
      - name: Install dependencies
        shell: bash
        run: ./.ci/ci_install.sh

      # Build packages
      - name: Build packages
        env:
          PLATFORM: osx
        shell: bash
        run: ./.ci/ci_build.sh

      # Collecting deployable artifacts
      - name: Collecting deployable artifacts
        shell: bash
        run: |
          mkdir -p macOS
          mv build/*.tar.gz macOS

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: macOS.zip
          path: macOS

######################
###### Windows #######
######################

  windows:
    name: Windows
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: true

      # Append PR number to version
      - name: Append PR number to version
        shell: bash
        run: echo -n "-PR#${{ github.event.pull_request.number }}" >> version

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.14.1'
          target: 'desktop'
          arch: 'win64_msvc2017_64'

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'

      - name: Set up x64 build architecture environment
        shell: cmd
        run: call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

      # Build packages
      - name: Build packages
        env:
          PLATFORM: windows
        shell: bash
        run: ./.ci/ci_build.sh

      # Collecting deployable artifacts
      - name: Collecting deployable artifacts
        shell: bash
        run: |
          mkdir -p windows
          mv build/*.zip windows
      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: windows.zip
          path: windows