name: Windows Builds

on:
  # Reusable from push_pull.yml
  workflow_call:
    inputs:
      event_name:
        type: string
        description: The event name
        default: ''
        required: false
      pull_request_number:
        type: string
        description: The corresponding PR number
        default: ''
        required: false
      nightly:
        type: boolean
        description: Nightly build
        default: false
        required: false
      publish:
        type: boolean
        description: Package publishing
        default: false
        required: false

jobs:

  windows:
    name: ${{ matrix.os.description }}
    runs-on: ${{ matrix.os.architecture == 'arm64' && 'windows-11-arm' || 'windows-2022' }}
    env:
      LIBJPEG_TURBO_VERSION: 3.1.0
    strategy:
      fail-fast: false
      matrix:
        os: [
          { architecture: 'arm64', description: 'Windows 11 (arm64)' },
          { architecture: 'x64', description: 'Windows 11 (x64)' }
        ]

    steps:
      - name: ‚¨á Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: üîß Prepare
        shell: bash
        run: |
          tr -d '\n' < .version > temp && mv temp .version
          if [[ "${{ inputs.event_name }}" == "pull_request" ]]; then
            echo -n "+PR${{ inputs.pull_request_number }}" >> .version
          elif [[ "${{ inputs.nightly }}" = true ]]; then
            echo -n "+nightly$(date '+%Y%m%d')" >> .version
          fi

      - name: üì• Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.3'
          architecture: ${{ matrix.os.architecture }}

      - name: üì• Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.*'
          target: 'desktop'
          modules: 'qtserialport qtwebsockets'
          cache: 'true'
          cache-key-prefix: 'cache-qt-windows'
          setup-python: 'false'

      - name: üì• Install latest CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: üõ†Ô∏è Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.os.architecture }}

      - name: üíæ Download Pre-Build Dependencies
        id: dependencies
        uses: ./.github/actions/download-pre-built-deps
        with:
          os: 'windows'
          architecture: ${{ matrix.os.architecture }}
          build_type: ${{ inputs.event_name == 'pull_request' && 'relwithdebinfo' || 'release' }}

      - name: üë∑ Build ${{ env.HINT }}
        shell: cmd
        run: |
           cmake --preset windows-${{ env.BUILD_TYPE }} ${{ steps.dependencies.outputs.cmakeArgs }}
           cmake --build --preset windows-${{ env.BUILD_TYPE }} --target package
        env:
          BUILD_TYPE: ${{ inputs.event_name == 'pull_request' && 'relwithdebinfo' || 'release' }}
          HINT: ${{ steps.dependencies.outputs.cmakeArgs != '' && '(with pre-built dependencies)' || '(full build)' }}

      - name: üì¶ Upload
        if: ${{ inputs.publish || inputs.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.event_name == 'pull_request' && env.NAME || format('artifact-{0}', env.NAME) }}
          path: |
            build/Hyperion-*
            !build/*.json
        env:
          NAME: ${{ format('windows_{0}', matrix.os.architecture) }}
