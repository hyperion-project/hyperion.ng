// This is a example config (hyperion.config.json) with comments, in any case you need to create your own one with HyperCon!
// location of all configs: /etc/hyperion
// Webpage: https://www.hyperion-project.org


{
	/// geenral Settings 
	/// * 'name'          : The user friendly name of the hyperion instance (used for network things)
	/// * 'showOptHelp'   : Show option expanations at the webui. Highly recommended for beginners.
	/// * 'configVersion' : Don't touch! It's an internal value regarding which validation schema for this config is used.
	"general" :
	{
		"name"       : "MyHyperionConfig",
		"showOptHelp" : true,
		"configVersion" : 2
	},
	/// set log level: silent warn verbose debug
	"logger" :
	{
		"level" : "warn"
	},

	/// Device configuration contains the following fields: 
	/// * 'name'       : The user friendly name of the device (only used for display purposes)
	/// * 'type'       : The type of the device or leds (known types for now are
	///  APA102, WS2801, P9813, LPD6803, LPD8806, ---------PWM---------, WS2812b (just RPi1), WS281X (RPi1, RPi2, RPi3), --------OTHER--------, PhilipsHUE, AtmoOrb, PiBlaster, Tinkerforge, FadeCandy, RawHID (USB), UDP, SEDU, TPM2, USBASP-WS2801, USBASP-WS2812, ------3rd PARTY------, Adalight, AdalightAPA102, Atmo, Lightpack, Multi-Lightpack, Paintpack, Test (file), None)
	/// * [device type specific configuration]
	/// * 'colorOrder' : The order of the color bytes ('rgb', 'rbg', 'bgr', etc.).
	/// * 'rewriteTime': in ms. Data is resend to leds, if no new data is available in thistime. 0 means no refresh
	"device" :
	{
		"type"       : "file",
		"output"     : "/dev/null",
		"rate"     : 1000000,
		"colorOrder" : "rgb",
		"rewriteTime": 0
	},

	/// Color manipulation configuration used to tune the output colors to specific surroundings. 
	/// The configuration contains a list of color-transforms. Each transform contains the 
	/// following fields:
	///  * 'imageToLedMappingType'      : multicolor_mean - every led has it's own calculatedmean color
	///                                   unicolor_mean   - every led has same color, color is the mean of whole image
	///  * 'channelAdjustment'
	///      * 'id'     : The unique identifier of the channel adjustments (eg 'device_1')
	///      * 'leds'   : The indices (or index ranges) of the leds to which this channel adjustment applies
	///            (eg '0-5, 9, 11, 12-17'). The indices are zero based.
	///      * 'black'/'white'/'red'/'green'/'blue'/'cyan'/'magenta'/'yellow' : Array of RGB to adjust the output color
	///      * 'gammaRed'/'gammaGreen'/'gammaBlue'  : Gamma value for each channel 
	///      * 'id'     : The unique identifier of the channel adjustments (eg 'device_1')
	///      * 'id'     : The unique identifier of the channel adjustments (eg 'device_1')
	///  	 * 'backlightThreshold' : Minimum brightness (backlight)
	///  	 * 'backlightColored'   : backlight with color, instead of white
	///  	 * 'brightness' : Between 0.0-0.5 the brightness is linearized (white is as bright as red, is as bright as yellow).
	///						  Between 0.5-1.0 the linearization reduces slowly until it's gone with 1.0 (white is 3x brighter than red, yellow is 2x brighter than red)
	"color" :
	{
		"imageToLedMappingType" : "multicolor_mean",
		"channelAdjustment" :
		[
			{
				"id"   : "default",
				"leds" : "*",
				"black"   : [0,0,0],
				"white"   : [255,255,255],
				"red"     : [255,0,0],
				"green"   : [0,255,0],
				"blue"    : [0,0,255],
				"cyan"    : [0,255,255],
				"magenta" : [255,0,255],
				"yellow"  : [255,255,0],
				"gammaRed"   : 1.5,
				"gammaGreen" : 1.5,
				"gammaBlue"  : 1.5,
				"backlightThreshold"  : 0.0,
				"backlightColored"  : false,
				"brightness" : 0.5
			}
		]
	},

	/// smoothing
	///  * 'smoothing' : Smoothing of the colors in the time-domain with the following tuning 
	///                  parameters:
	///            - 'enable'          Enable or disable the smoothing (true/false)
	///            - 'type'             The type of smoothing algorithm ('linear' or 'none')
	///            - 'time_ms'          The time constant for smoothing algorithm in milliseconds
	///            - 'updateFrequency'  The update frequency of the leds in Hz
	///            - 'updateDelay'      The delay of the output to leds (in periods of smoothing)
	///            - 'continuousOutput' Flag for enabling continuous output to Leds regardless of new input or not
	"smoothing" :
	{
		"enable"           : true,
		"type"             : "linear",
		"time_ms"          : 200,
		"updateFrequency"  : 25.0000,
		"updateDelay"      : 0,
		"continuousOutput" : true
	},

	/// Configuration for the embedded V4L2 grabber
	///  * enable               : Enable or disable the v4lgrabber (true/false)
	///  * device               : V4L2 Device to use [default="/dev/video0"]
	///  * input                : V4L2 input to use [default=0]
	///  * standard             : Video standard (no-change/PAL/NTSC) [default="no-change"]
	///  * width                : V4L2 width to set [default=-1]
	///  * height               : V4L2 height to set [default=-1]
	///  * frameDecimation      : Frame decimation factor [default=2]
	///  * sizeDecimation       : Size decimation factor [default=8]
	///  * priority             : Hyperion priority channel [default=900]
	///  * mode                 : 3D mode to use 2D/3DSBS/3DTAB (note: no autodetection) [default="2D"]
	///  * useKodiChecker       : Enable/disable V4L2 according kodichecker sate if set to true [default=false]
	///  * cropLeft             : Cropping from the left [default=0]
	///  * cropRight            : Cropping from the right [default=0]
	///  * cropTop              : Cropping from the top [default=0]
	///  * cropBottom           : Cropping from the bottom [default=0]
	///  * redSignalThreshold   : Signal threshold for the red channel between 0.0 and 1.0 [default=0.0]
	///  * greenSignalThreshold : Signal threshold for the green channel between 0.0 and 1.0 [default=0.0]
	///  * blueSignalThreshold  : Signal threshold for the blue channel between 0.0 and 1.0 [default=0.0]
	///  * signalDetectionVerticalOffsetMin   : area for signal detection - horizontal minimum offset value. Values between 0.0 and 1.0
	///  * signalDetectionHorizontalOffsetMin : area for signal detection - vertical minimum offset value. Values between 0.0 and 1.0
	///  * signalDetectionVerticalOffsetMax   : area for signal detection - horizontal maximum offset value. Values between 0.0 and 1.0
	///  * signalDetectionHorizontalOffsetMax : area for signal detection - vertical maximum offset value. Values between 0.0 and 1.0
	"grabberV4L2" :
	[
		{
			"enable"   : false,
			"device"   : "auto",
			"input"    : 0,
			"standard" : "PAL",
			"width"    : -1,
			"height"   : -1,
			"frameDecimation" : 2,
			"sizeDecimation"  : 8,
			"priority"    : 240,
			"mode"        : "2D",
			"useKodiChecker" : false,
			"cropLeft"    : 0,
			"cropRight"   : 0,
			"cropTop"     : 0,
			"cropBottom"  : 0,
			"redSignalThreshold"   : 0.0,
			"greenSignalThreshold" : 0.0,
			"blueSignalThreshold"  : 0.0,
			"signalDetectionVerticalOffsetMin"   : 0.25,
			"signalDetectionHorizontalOffsetMin" : 0.25,
			"signalDetectionVerticalOffsetMax"   : 0.75,
			"signalDetectionHorizontalOffsetMax" : 0.75
		}
	],

	///  The configuration for the frame-grabber, contains the following items: 
	///   * enable       : true if the framegrabber (platform grabber) should be activated
	///   * type         : type of grabber. (auto|osx|dispmanx|amlogic|x11|framebuffer) [auto]
	///   * width        : The width of the grabbed frames [pixels]
	///   * height       : The height of the grabbed frames [pixels]
	///   * frequency_Hz : The frequency of the frame grab [Hz]
	///   * priority     : The priority of the frame-gabber (Default=250) HINT: lower value result in HIGHER priority! 
	///   * ATTENTION    : Power-of-Two resolution is not supported and leads to unexpected behaviour! 
	"framegrabber" :
	{
		// for all type of grabbers
		"enable"       : true,
		"type"         : "framebuffer",
		"frequency_Hz" : 10,
		"priority"     : 250,

		// valid for grabber: osx|dispmanx|amlogic|framebuffer
		"width"        : 96,
		"height"       : 96,
		
		// valid for x11
		"useXGetImage"              : false,
		"horizontalPixelDecimation" : 8,
		"verticalPixelDecimation"   : 8,
		
		// valid for dispmanx and x11
		"cropLeft"   : 0,
		"cropRight"  : 0,
		"cropTop"    : 0,
		"cropBottom" : 0,

		// valid for framebuffer
		"device"     : "/dev/fb0"
	},

	/// The black border configuration, contains the following items: 
	///  * enable             : true if the detector should be activated
	///  * threshold          : Value below which a pixel is regarded as black (value between 0.0 and 1.0)
	///  * unknownFrameCnt    : Number of frames without any detection before the border is set to 0 (default 600)
	///  * borderFrameCnt     : Number of frames before a consistent detected border gets set (default 50)
	///  * maxInconsistentCnt : Number of inconsistent frames that are ignored before a new border gets a chance to proof consistency
	///  * blurRemoveCnt      : Number of pixels that get removed from the detected border to cut away blur (default 1)
	///  * mode               : Border detection mode (values=default,classic,osd)
	"blackborderdetector" :
	{
		"enable"             : true,
		"threshold"          : 0.05,
		"unknownFrameCnt"    : 600,
		"borderFrameCnt"     : 50,
		"maxInconsistentCnt" : 10,
		"blurRemoveCnt"      : 1,
		"mode"               : "default"
	},

	/// The configuration of the Kodi connection used to enable and disable the frame-grabber. Contains the following fields: 
	///  * enable            : enable/disable Kodi-Checker
	///  * kodiAddress       : The IP address of the Kodi-host
	///  * kodiTcpPort       : The TCP-port of the Kodi-server
	///  * grabVideo         : Flag indicating that the frame-grabber is on(true) during video playback
	///  * grabPictures      : Flag indicating that the frame-grabber is on(true) during picture show
	///  * grabAudio         : Flag indicating that the frame-grabber is on(true) during audio playback
	///  * grabMenu          : Flag indicating that the frame-grabber is on(true) at the Kodi menu
	///  * grabPause         : Flag indicating that the frame-grabber is on(true) at player state "pause"
	///  * grabScreensaver   : Flag indicating that the frame-grabber is on(true) when Kodi is on screensaver
	///  * enable3DDetection : Flag indicating that the frame-grabber should switch to a 3D compatible modus if a 3D video is playing
	"kodiVideoChecker" : 
	{
		"enable"            : true,
		"kodiAddress"       : "127.0.0.1",
		"kodiTcpPort"       : 9090,
		"grabVideo"         : true,
		"grabPictures"      : true,
		"grabAudio"         : true,
		"grabMenu"          : false,
		"grabPause"         : false,
		"grabScreensaver"   : false,
		"enable3DDetection" : false
	},

	/// foregroundEffect sets a "booteffect" or "bootcolor" during startup for a given period in ms (duration_ms)
	///  * enable      : if true, foreground effect is enabled
	///  * type        : choose between "color" or "effect"
	///  * color       : if type is color, a color is used (RGB) (example: [0,0,255])
	///  * effect      : if type is effect a effect is used (example: "Rainbow swirl fast")
	///  * duration_ms : The duration of the selected effect or color (0=endless)
	///            HINT: "foregroundEffect" starts always with priority 0, so it blocks all remotes and grabbers if the duration_ms is endless (0)
	"foregroundEffect" :
	{
		"enable"      : true,
		"type"        : "effect",
		"color"       : [0,0,255],
		"effect"      : "Rainbow swirl fast",
		"duration_ms" : 3000
	},
	
	/// backgroundEffect sets a background effect or color. It is used when all capture devices are stopped (with the help of the kodiVideChecker or manual via remote). Could be also selected via priorities selection.
	///  * enable : if true, background effect is enabled
	///  * type   : choose between "color" or "effect"
	///  * color  : if type is color, a color is used (RGB) (example: [255,134,0])
	///  * effect : if type is effect a effect is used (example: "Rainbow swirl fast")
	"backgroundEffect" :
	{
		"enable" : true,
		"type"   : "effect",
		"color"  : [255,138,0],
		"effect" : "Warm mood blobs"
	},

	/// The configuration of the Json/Proto forwarder. Forward messages to multiple instances of Hyperion on same and/or other hosts 
	/// 'proto' is mostly used for video streams and 'json' for effects 
	///  * enable : Enable or disable the forwarder (true/false)
	///  * proto  : Proto server adress and port of your target. Syntax:[IP:PORT] -> ["127.0.0.1:19447"] or more instances to forward ["127.0.0.1:19447","192.168.0.24:19449"] 
	///  * json   : Json server adress and port of your target. Syntax:[IP:PORT] -> ["127.0.0.1:19446"] or more instances to forward ["127.0.0.1:19446","192.168.0.24:19448"] 
	///  HINT:If you redirect to "127.0.0.1" (localhost) you could start a second hyperion with another device/led config!
	///       Be sure your client(s) is/are listening on the configured ports. The second Hyperion (if used) also needs to be configured! (HyperCon -> External -> Json Server/Proto Server)
	"forwarder" :
	{
		"enable" : false,
		"proto"  : ["127.0.0.1:19447"],
		"json"   : ["127.0.0.1:19446"]
	},

	/// The configuration of the Json server which enables the json remote interface
	///  * port : Port at which the json server is started
	"jsonServer" :
	{
		"port" : 19444
	},

	/// The configuration of the Proto server which enables the protobuffer remote interface
	///  * port : Port at which the protobuffer server is started
	"protoServer" :
	{
		"port" : 19445
	},

	/// The configuration of the boblight server which enables the boblight remote interface
	///  * enable   : Enable or disable the boblight server (true/false)
	///  * port     : Port at which the boblight server is started
	///  * priority : Priority of the boblight server (Default=200) HINT: lower value result in HIGHER priority! 
 	"boblightServer" :
 	{
 		"enable"   : false,
 		"port"     : 19333,
 		"priority" : 200
 	},

	/// The configuration of the udp listener
	///  * enable   : Enable or disable the udp listener (true/false)
	///  * address  : The listener address, pre configured is multicast which listen also to unicast ip addresses at the same time. If emtpy, multicast is disabled and it also accepts unicast from all IPs
	///  * port     : Port at which the udp listener starts
	///  * priority : Priority of the udp listener server (Default=190)
	///  * timeout  : The timeout sets the timelimit for a "soft" off of the udp listener, if no packages are received (for example to switch to a gabber or InitialEffect - background-effect)
	///  * shared   : If true, the udp listener is shared across all hyperion instances (if using more than one (forwarder))
	"udpListener" :
	{
		"enable"   : false,
		"address"  : "239.255.28.01",
		"port"     : 2801,
		"priority" : 190,
		"timeout"  : 10000,
		"shared"   : false
	},

	/// Configuration of the Hyperion webserver
	///  * enable        : enable or disable the webserver (true/false)
	///  * document_root : path to hyperion webapp files (webconfig developer only)
	///  * port          : the port where hyperion webapp is accasible
	"webConfig" :
	{
		"enable"        : true,
		"document_root" : "/path/to/files",
		"port"          : 8099
	},

	/// The configuration of the effect engine, contains the following items: 
	///  * paths : An array with absolute/relative location(s) of directories with effects 
	///  * disable : An array with effect names that shouldn't be loaded 
	"effects" : 
	{
		"paths" :
		[
			"/storage/hyperion/effects",
			"/usr/share/hyperion/effects"
		],
		"disable" :
		[
			"Rainbow swirl",
			"X-Mas"
		]
	},
	
	/// Recreate and save led layouts made with web config. These values are just helpers for ui, not for Hyperion.
	"ledConfig" :
	{
		"top"	 	: 8,
		"bottom"	: 8,
		"left"		: 5,
		"right"		: 5,
		"glength"	: 0,
		"gpos"		: 0,
		"position"	: 0,
		"reverse"	: false,
		"hdepth"	: 8,
		"vdepth"	: 5,
		"overlap"	: 0,
		"edgegap"	: 0
	},
	
	///  The configuration for each individual led. This contains the specification of the area 
	///  averaged of an input image for each led to determine its color. Each item in the list 
	///  contains the following fields:
	///  * index: The index of the led. This determines its location in the string of leds; zero 
	///           being the first led.
	///  * hscan: The fractional part of the image along the horizontal used for the averaging 
	///           (minimum and maximum inclusive)
	///  * vscan: The fractional part of the image along the vertical used for the averaging 
	///           (minimum and maximum inclusive)
	
    "leds":
	[
		{
			"hscan": {
				"maximum": 0.125,
				"minimum": 0
			},
			"index": 0,
			"vscan": {
				"maximum": 0.08,
				"minimum": 0
			}
		},
		{
			"hscan": {
				"maximum": 0.25,
				"minimum": 0.125
			},
			"index": 1,
			"vscan": {
				"maximum": 0.08,
				"minimum": 0
			}
		},
		{
			"hscan": {
				"maximum": 0.375,
				"minimum": 0.25
			},
			"index": 2,
			"vscan": {
				"maximum": 0.08,
				"minimum": 0
			}
		},
		{
			"hscan": {
				"maximum": 0.5,
				"minimum": 0.375
			},
			"index": 3,
			"vscan": {
				"maximum": 0.08,
				"minimum": 0
			}
		},
		{
			"hscan": {
				"maximum": 0.625,
				"minimum": 0.5
			},
			"index": 4,
			"vscan": {
				"maximum": 0.08,
				"minimum": 0
			}
		},
		{
			"hscan": {
				"maximum": 0.75,
				"minimum": 0.625
			},
			"index": 5,
			"vscan": {
				"maximum": 0.08,
				"minimum": 0
			}
		},
		{
			"hscan": {
				"maximum": 0.875,
				"minimum": 0.75
			},
			"index": 6,
			"vscan": {
				"maximum": 0.08,
				"minimum": 0
			}
		},
		{
			"hscan": {
				"maximum": 1,
				"minimum": 0.875
			},
			"index": 7,
			"vscan": {
				"maximum": 0.08,
				"minimum": 0
			}
		},
		{
			"hscan": {
				"maximum": 1,
				"minimum": 0.95
			},
			"index": 8,
			"vscan": {
				"maximum": 0.2,
				"minimum": 0
			}
		},
		{
			"hscan": {
				"maximum": 1,
				"minimum": 0.95
			},
			"index": 9,
			"vscan": {
				"maximum": 0.4,
				"minimum": 0.2
			}
		},
		{
			"hscan": {
				"maximum": 1,
				"minimum": 0.95
			},
			"index": 10,
			"vscan": {
				"maximum": 0.6,
				"minimum": 0.4
			}
		},
		{
			"hscan": {
				"maximum": 1,
				"minimum": 0.95
			},
			"index": 11,
			"vscan": {
				"maximum": 0.8,
				"minimum": 0.6
			}
		},
		{
			"hscan": {
				"maximum": 1,
				"minimum": 0.95
			},
			"index": 12,
			"vscan": {
				"maximum": 1,
				"minimum": 0.8
			}
		},
		{
			"hscan": {
				"maximum": 1,
				"minimum": 0.875
			},
			"index": 13,
			"vscan": {
				"maximum": 1,
				"minimum": 0.92
			}
		},
		{
			"hscan": {
				"maximum": 0.875,
				"minimum": 0.75
			},
			"index": 14,
			"vscan": {
				"maximum": 1,
				"minimum": 0.92
			}
		},
		{
			"hscan": {
				"maximum": 0.75,
				"minimum": 0.625
			},
			"index": 15,
			"vscan": {
				"maximum": 1,
				"minimum": 0.92
			}
		},
		{
			"hscan": {
				"maximum": 0.625,
				"minimum": 0.5
			},
			"index": 16,
			"vscan": {
				"maximum": 1,
				"minimum": 0.92
			}
		},
		{
			"hscan": {
				"maximum": 0.5,
				"minimum": 0.375
			},
			"index": 17,
			"vscan": {
				"maximum": 1,
				"minimum": 0.92
			}
		},
		{
			"hscan": {
				"maximum": 0.375,
				"minimum": 0.25
			},
			"index": 18,
			"vscan": {
				"maximum": 1,
				"minimum": 0.92
			}
		},
		{
			"hscan": {
				"maximum": 0.25,
				"minimum": 0.125
			},
			"index": 19,
			"vscan": {
				"maximum": 1,
				"minimum": 0.92
			}
		},
		{
			"hscan": {
				"maximum": 0.125,
				"minimum": 0
			},
			"index": 20,
			"vscan": {
				"maximum": 1,
				"minimum": 0.92
			}
		},
		{
			"hscan": {
				"maximum": 0.05,
				"minimum": 0
			},
			"index": 21,
			"vscan": {
				"maximum": 1,
				"minimum": 0.8
			}
		},
		{
			"hscan": {
				"maximum": 0.05,
				"minimum": 0
			},
			"index": 22,
			"vscan": {
				"maximum": 0.8,
				"minimum": 0.6
			}
		},
		{
			"hscan": {
				"maximum": 0.05,
				"minimum": 0
			},
			"index": 23,
			"vscan": {
				"maximum": 0.6,
				"minimum": 0.4
			}
		},
		{
			"hscan": {
				"maximum": 0.05,
				"minimum": 0
			},
			"index": 24,
			"vscan": {
				"maximum": 0.4,
				"minimum": 0.2
			}
		},
		{
			"hscan": {
				"maximum": 0.05,
				"minimum": 0
			},
			"index": 25,
			"vscan": {
				"maximum": 0.2,
				"minimum": 0
			}
		}
	]
}
