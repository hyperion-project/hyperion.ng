jobs:

######################
###### Linux #########
######################

- job: Linux
  timeoutInMinutes: 120
  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    matrix:
      AMD64 (x64):
        dockerTag: 'amd64'
        dockerName: 'Debian Stretch (AMD64)'
        platform: 'x11'
      ARMv6hf (Raspberry Pi v1 & ZERO):
        dockerTag: 'armv6hf'
        dockerName: 'Debian Stretch (Raspberry Pi v1 & ZERO)'
        platform: 'rpi'
      ARMv7hf (Raspberry Pi 2 & 3):
        dockerTag: 'armv7hf'
        dockerName: 'Debian Stretch (Raspberry Pi 2 & 3)'
        platform: 'rpi'
      ARMv8 (Generic AARCH64):
        dockerTag: 'aarch64'
        dockerName: 'ARMv8 (Generic AARCH64)'
        platform: 'amlogic'

  steps:
  - checkout: self # represents the repo where the initial Pipelines YAML file was found
    submodules: recursive # set to 'recursive' to get submodules of submodules

  # build process
  - bash: ./.ci/ci_build.sh
    displayName: 'Build $(dockerName) packages'
    env:
      DOCKER_TAG: $(dockerTag)
      DOCKER_NAME: $(dockerName)
      PLATFORM: $(platform)

######################
###### macOS #########
######################

- job: macOS
  timeoutInMinutes: 120
  pool:
    vmImage: 'macOS-10.14'

  steps:
  - checkout: self # represents the repo where the initial Pipelines YAML file was found
    submodules: recursive # set to 'recursive' to get submodules of submodules

  # install dependencies
  - bash: ./.ci/ci_install.sh
    displayName: 'Install dependencies'

  # build process
  - bash: ./.ci/ci_build.sh
    env:
      PLATFORM: 'osx'
    condition: succeeded()
    displayName: 'Build macOS 10.13 packages'

######################
###### windows #######
######################

- job: windows
  timeoutInMinutes: 120
  pool:
    vmImage: 'windows-latest'

  steps:
  - checkout: self # represents the repo where the initial Pipelines YAML file was found
    submodules: recursive # set to 'recursive' to get submodules of submodules

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      addToPath: true
      architecture: 'x64'

  - script: |
      cd $(Build.SourcesDirectory)
      python -m pip install aqtinstall
      python -m aqt install -O c:\Qt 5.14.0 windows desktop win64_msvc2017_64
    displayName: 'Install Qt 5.14.0'
  # build process
  - bash: ./.ci/ci_build.sh
    env:
      PLATFORM: 'windows'
    condition: succeeded()
    displayName: 'Build windows packages'
